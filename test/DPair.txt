module DPair

import Prelude

data DPair (a : Type)(b : a -> Type): Type where
  mk : Pi (x : a), b x -> DPair a b
  
rec : Pi (a : Type)(b : a -> Type)(p : DPair a b -> Type)(br : Pi (x : a)(y : b x), p (mk a b x y))(dp : DPair a b), p dp
rec a b p b (mk x y) = b x y
  
fst : Pi (a : Type)(b : a -> Type), DPair a b -> a
fst a b (mk x y) = x

snd : Pi (a : Type)(b : a -> Type)(x : DPair a b), b (fst a b x)
snd a b (mk x y) = y

eta : Pi (a : Type)(b : a -> Type)(x : DPair a b), Eq (DPair a b) (DPair a b) x (mk a b (fst a b x) (snd a b x))
eta a b (mk x y) = Refl (DPair a b) (mk a b x y)

no_conf_t : Pi (a : Type)(b : a -> Type), DPair a b -> DPair a b -> Prop
no_conf_t a b (mk x1 y1) (mk x2 y2) = And (Eq a a x1 x2) (Eq (b x1) (b x2) y1 y2)

no_conf_h : Pi (a : Type)(b : a -> Type)(x : DPair a b), no_conf_t a b x x
no_conf_h a b (mk x y) = And_intro (Eq a a x x) (Eq (b x) (b x) y y) (Refl a x) (Refl (b x) y)

no_conf : Pi (a : Type)(b : a -> Type)(x y : DPair a b), Eq (DPair a b) (DPair a b) x y -> no_conf_t a b x y
no_conf a b x y e = subst (DPair a b) x y e (no_conf_t a b x) (no_conf_h a b x)

