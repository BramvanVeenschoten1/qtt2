module Prelude

Bottom : Prop
Bottom = Pi (0 a : Prop), a

Top : Prop
Top = Bottom -o Bottom

trivial : Top
trivial = \x, x

And : Prop -> Prop -> Prop
And a b = Pi c : Prop, (a -> b -> c) -> c

And_left : Pi (a b : Prop), And a b -> a
And_left a b x = x a (\x y, x)

And_right : Pi (a b : Prop), And a b -> b
And_right a b x = x b (\x y, y)

And_intro : Pi (a b : Prop), a -> b -> And a b
And_intro a b x y _ f = f x y

And_rec : Pi (a b : Prop)(c : Type), And a b -> (a -> b -> c) -> c
And_rec a b c x f = f (And_left a b x) (And_right a b x)

Or : Prop -> Prop -> Prop
Or a b = Pi c : Prop, (a -> c) -> (b -> c) -> c

Or_left : Pi (a b : Prop), a -> Or a b
Or_left a b x _ f g = f x

Or_right : Pi (a b : Prop), b -> Or a b
Or_right a b x _ f g = g x 

Exists : Pi a : Type, (a -> Prop) -> Prop
Exists a p = Pi c : Prop, (Pi x : a, p x -> c) -> c

Exists_intro : Pi (a : Type)(p : a -> Prop)(x : a), p x -> Exists a p
Exists_intro a p x px _ f = f x px

Eq : Pi (a b : Type 1), a -> b -> Prop
Eq a b x y = Pi (0 p : Pi c : Type 1, c -> Prop), p a x -o p b y

Refl : Pi (a : Type 1)(x : a), Eq a a x x
Refl a x p px = px

subst : Pi (0 a : Type 1)(0 x y : a)(0 e : Eq a a x y)(0 p : a -> Type), p x -o p y
subst a x y e =
  Lift 1 a x y (e
    (\c z, Pi e : (Pi 0 p : Type 1 -> Prop, p c -o p a),
      Pi 0 p : a -> Prop, p x -o p (Lift 2 Type 1 c a e (\x, x) z))
    (\_ _ x, x)
    (\_ x, x))

sym : Pi (a b : Type)(x : a)(y : b), Eq a b x y -> Eq b a y x
sym a b x y e = e (\c z, Eq c a z x) (Refl a x)

trans : Pi (a b c : Type)(x : a)(y : b)(z : c), Eq a b x y -> Eq b c y z -> Eq a c x z
trans a b c x y z e1 e2 = e2 (\d w, Eq a d x w) e1

cong : Pi (a b : Type)(x y : a)(f : a -> b)(e : Eq a a x y), Eq b b (f x) (f y)
cong a b x y f e = subst a x y e (\z, Eq b b (f x) (f z)) (Refl b (f x))

dcong : Pi (a : Type)(b : a -> Type)(x y : a)(f : Pi x : a, b x)(e : Eq a a x y), Eq (b x) (b y) (f x) (f y)
dcong a b x y f e = subst a x y e (\z, Eq (b x) (b z) (f x) (f z)) (Refl (b x) (f x))

cast : Pi (a b : Type), Eq Type Type a b -> a -> b
cast a b e = subst Type a b e (\x, x)

J2 : Pi (a : Type 1)(x y : a)(e : Eq a a x y)(P : Pi z : a, Eq a a x z -> Type), P x (Refl a x) -> P y e
J2 a x y e P px = subst a x y e (\z, Pi e : Eq a a x z, P z e) (\_, px) e

K2 : Pi (a : Type 1)(x : a)(e : Eq a a x x)(P : Eq a a x x -> Type), P (Refl a x) -> P e
K2 a x e P px = px

EqualityIrrelevance : Pi (a : Type)(x : a)(e : Eq a a x x), Eq a a (subst a x x e (\_, a) x) x
EqualityIrrelevance a x e = Refl a x

proofIrrelevance : Pi (a : Prop)(x y : a), Eq a a x y
proofIrrelevance a x y = Refl a x
  
liftBottom : Bottom => Pi (0 a : Type 4), a
liftBottom x a = Lift 5 Type 4 Top a (x (Pi (0 p : Type 4 -> Prop), p Top -o p a)) (\x, x) trivial

id : Pi (a : Type), a -> a
id a x = x

const : Pi (a b : Type), a -> b -> a
const a b x y = x

flip : Pi (a b c : Type), (a -> b -> c) -> (b -> a -> c)
flip a b c f x y = f y x

comp : Pi (a b c : Type), (b -> c) -> (a -> b) -> (a -> c)
comp a b c f g x = f (g x)

fork : Pi (a b c : Type), (a -> b -> c) -> (a -> b) -> a -> c
fork a b c f g x = f x (g x)

data Unit : Type where
  tt : Unit


